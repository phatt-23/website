(function(){"use strict";const y="unsolvable";class I{}class a{static SerializableClass(e){return function(t){const s=e??t.name;t.prototype.__type=s,a.registerClass(s,t)}}static serialize(e){if(e==null)return e;if(Array.isArray(e))return e.map(a.serialize);if(e instanceof Set)return{__type:"Set",values:Array.from(e).map(a.serialize)};if(e instanceof Map)return{__type:"Map",entries:Array.from(e.entries()).map(([t,s])=>[a.serialize(t),a.serialize(s)])};if(typeof e=="object"){if(Array.isArray(e))return e.map(a.serialize);const t=e.constructor,l={__type:e.__type??t.name};for(const[r,o]of Object.entries(e))l[r]=a.serialize(o);return l}return e}static revive(e){if(e==null)return e;if(Array.isArray(e))return e.map(a.revive);if(e.__type==="Set")return new Set(e.values.map(a.revive));if(e.__type==="Map")return new Map(e.entries.map(([t,s])=>[a.revive(t),a.revive(s)]));if(e.__type){const t=a.getClass(e.__type);if(!t)throw new Error(`Serializer - Unknown class: ${e.__type}`);const s=Object.create(t.prototype);for(const[l,r]of Object.entries(e))l!=="__type"&&(s[l]=a.revive(r));return s}return e}static registerClass(e,t){a.classRegistry.set(e,t)}static getClass(e){return a.classRegistry.get(e)}static classRegistry=new Map}a.registerClass(Object.name,Object);const g="n:",C="e:";function M(n,e,t){return t.indexOf(n)===e}var P=Object.getOwnPropertyDescriptor,S=(n,e,t,s)=>{for(var l=s>1?void 0:s?P(e,t):e,r=n.length-1,o;r>=0;r--)(o=n[r])&&(l=o(l)||l);return l};let u=class extends I{_nodes;_edges;constructor(){super(),this._nodes=new Set,this._edges=new Set}addNode(n){n.classes==null&&(n.classes=""),!this.nodes.find(e=>e.id==n.id)&&this._nodes.add(n)}addEdge(n){n.classes==null&&(n.classes=""),!this.edges.find(e=>e.id==n.id)&&this._edges.add(n)}get nodes(){return Array.from(this._nodes.values())}get edges(){return Array.from(this._edges.values())}removeNode(n){if(!this._nodes.has(n))return;this._nodes.delete(n),Array.from(this.edges).filter(t=>t.to===n.id||t.from===n.id).forEach(t=>this._edges.delete(t))}removeEdge(n){this._edges.delete(n)}empty(){return this.nodes.length==0}copy(){const n=new u;for(const e of this._nodes)n.addNode({id:e.id,label:e.label,position:e.position?{...e.position}:void 0,classes:e.classes});for(const e of this._edges)n.addEdge({id:e.id,from:e.from,to:e.to,weight:e.weight,classes:e.classes});return n}asString(){const n=this.nodes.map(t=>t.id.slice(g.length)).join(`
`),e=this.edges.map(t=>t.from.slice(g.length)+" "+t.to.slice(g.length)+(t.weight!=null?" "+t.weight:"")).join(`
`);return n+`
`+e+`
`}static fromString(n){const e=n.split(`
`).map(s=>s.trim()).filter(s=>s.length).filter(M);let t=new u;console.debug("LINES",e);for(let s=0;s<e.length;s++){const r=e[s].split(" ").map(o=>o.trim()).filter(o=>o.length);if(r.length==1){const o=r;t.addNode({id:g+o})}else if(r.length<=3){const o=r[0],f=r[1];let h;if(r.length==3)try{h=Number.parseFloat(r[2])}catch{return`On the line ${s}, couldn't parse the weight: '${r[2]}Please enter a number (floating allowed)`}t.addNode({id:g+o}),t.addNode({id:g+f}),t.addEdge({id:C+`${o}-${f}`,from:g+o,to:g+f,weight:h})}}return t}toSerializedString(n=!1){const e={nodes:this.nodes.map(t=>({id:t.id,label:t.label??null,position:t.position??null,classes:t.classes??""})),edges:this.edges.map(t=>({id:t.id,from:t.from,to:t.to,weight:t.weight??null,classes:t.classes??""}))};return JSON.stringify(e,null,n?2:0)}static fromSerializedString(n){const e=JSON.parse(n),t=new u;if(Array.isArray(e.nodes))for(const s of e.nodes)t.addNode({id:s.id,label:s.label??void 0,position:s.position??void 0,classes:s.classes??""});if(Array.isArray(e.edges))for(const s of e.edges)t.addEdge({id:s.id,from:s.from,to:s.to,weight:s.weight??void 0,classes:s.classes??""});return t}};u=S([a.SerializableClass()],u);class _{path;constructor(e){this.path=e}}class k{instance;constructor(e){this.instance=e}solve(){const e=this.instance.nodes,t=this.instance.edges,s=e.length;if(s===0)return y;if(s===1)return new _([e[0]]);const l=Array.from({length:s},()=>Array(s).fill(1/0));for(const i of t){const c=e.findIndex(d=>d.id===i.from),p=e.findIndex(d=>d.id===i.to);if(c!==-1&&p!==-1){const d=i.weight??1;l[c][p]=d,l[p][c]=d}}const r=0,o=1<<s,f=Array.from({length:o},()=>Array(s).fill(1/0)),h=Array.from({length:o},()=>Array(s).fill(-1));f[1<<r][r]=0;for(let i=0;i<o;i++)for(let c=0;c<s;c++){if(!(i&1<<c))continue;const p=i^1<<c;if(p!==0)for(let d=0;d<s;d++){if(!(p&1<<d))continue;const O=f[p][d]+l[d][c];O<f[i][c]&&(f[i][c]=O,h[i][c]=d)}}let v=1/0,A=-1;const N=o-1;for(let i=0;i<s;i++){const c=f[N][i]+l[i][r];c<v&&(v=c,A=i)}if(v===1/0)return y;const w=[];let E=N,m=A;for(;m!==-1;){w.push(m);const i=h[E][m];E^=1<<m,m=i}w.reverse(),w.push(r);const R=w.map(i=>e[i]);return new _(R)}}self.onmessage=async n=>{const e=u.fromSerializedString(n.data),t=new k(e);try{const s=t.solve();postMessage(s||y)}finally{postMessage(y)}}})();
